export default {
  name: 'Complex Angular component with advanced decorators, RxJS, and template syntax',
  sourceCode: [
    '// File: super-dashboard.component.ts',
    'import {',
    '  Component,',
    '  Input,',
    '  Output,',
    '  EventEmitter,',
    '  ChangeDetectionStrategy,',
    '  ViewChild,',
    '  ContentChild,',
    '  TemplateRef,',
    '  ElementRef,',
    '  HostListener,',
    '  OnInit,',
    '  AfterViewInit,',
    '  OnDestroy,',
    "} from '@angular/core';",
    "import { FormBuilder, FormGroup, Validators } from '@angular/forms';",
    "import { BehaviorSubject, Subject, combineLatest, of, timer } from 'rxjs';",
    "import { debounceTime, distinctUntilChanged, map, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';",
    '',
    "type Role = 'admin' | 'editor' | 'viewer';",
    '',
    'interface User {',
    '  id: string;',
    '  name: string;',
    '  email?: string | null;',
    '  role: Role;',
    '}',
    '',
    'interface Item {',
    '  id: string;',
    '  title: string;',
    '  subtitle?: string;',
    '  score?: number | null;',
    '  tags?: string[];',
    '  author?: User | null;',
    '  details?: { html?: string; meta?: Record<string, unknown> };',
    '}',
    '',
    'export interface DashboardConfig {',
    '  dense?: boolean;',
    '  pageSize?: number;',
    '  highlightThreshold?: number; // >= threshold => "top"',
    '  showTotals?: boolean;',
    '}',
    '',
    'enum LoadState {',
    "  Idle = 'idle',",
    "  Loading = 'loading',",
    "  Success = 'success',",
    "  Error = 'error',",
    '}',
    '',
    '@Component({',
    "  selector: 'app-super-dashboard',",
    '  changeDetection: ChangeDetectionStrategy.OnPush,',
    '  standalone: true,',
    '  styles: [`',
    '    :host { display:block; padding:12px; }',
    '    .toolbar { display:flex; gap:12px; align-items:center; margin-bottom:8px; }',
    '    .list { display:grid; gap:6px; }',
    '    .row { padding:6px 8px; border-radius:6px; border:1px solid #e5e7eb; display:grid; grid-template-columns:1fr auto; align-items:center; }',
    '    .row.selected { background:#f0f9ff; border-color:#bae6fd; }',
    '    .row.top { background:#ecfdf5; border-color:#bbf7d0; }',
    '    footer { margin-top:8px; display:flex; gap:12px; align-items:center; }',
    '  `],',
    '  template: `',
    '    <div class="toolbar">',
    '      <strong>{{ title }}</strong>',
    '      <span>Items: {{ (vm$ | async)?.count }}</span>',
    "      <span>Top: {{ (vm$ | async)?.topScore ?? '—' }}</span>",
    '',
    '      <ng-container *ngIf="config?.showTotals">',
    '        <span>Admins: {{ (vm$ | async)?.adminCount }}</span>',
    '      </ng-container>',
    '',
    '      <form [formGroup]="searchForm" (ngSubmit)="onSearchSubmit()">',
    '        <input #filterInput formControlName="q" placeholder="Search..." />',
    '        <button type="submit">Go</button>',
    '      </form>',
    '',
    '      <label>',
    '        <input type="checkbox" [checked]="config?.dense" (change)="toggleDense()" />',
    '        Dense',
    '      </label>',
    '    </div>',
    '',
    '    <section class="list" *ngIf="(vm$ | async) as vm">',
    '      <ng-container *ngFor="let i of vm.visible; let idx = index">',
    '        <div',
    '          class="row"',
    '          [class.selected]="i.isSelected"',
    '          [class.top]="i.isTop"',
    '          (click)="handleSelect(i.id)"',
    '          [attr.data-id]="i.id"',
    '        >',
    '          <div>',
    '            <strong>{{ i.title }}</strong>',
    '            <small *ngIf="i.subtitle"> — {{ i.subtitle }}</small>',
    '',
    '            <div class="tags" *ngIf="i.tags?.length">',
    '              <code *ngFor="let t of i.tags">{{ t }}</code>',
    '            </div>',
    '',
    '            <div *ngIf="i.details?.html" [innerHTML]="i.details?.html"></div>',
    '          </div>',
    '',
    '          <div>',
    '            <button (click)="emitAction(i.id); $event.stopPropagation()">Action</button>',
    '          </div>',
    '        </div>',
    '      </ng-container>',
    '    </section>',
    '',
    '    <footer>',
    '      <button *ngIf="(vm$ | async)?.canFetchMore" (click)="fetchMore()">Fetch more</button>',
    '      <small *ngIf="(vm$ | async)?.topScore == null">No scores available</small>',
    '',
    '      <ng-container *ngIf="footerTpl">',
    '        <ng-container *ngTemplateOutlet="footerTpl; context: { $implicit: (vm$ | async) }"></ng-container>',
    '      </ng-container>',
    '    </footer>',
    '  `,',
    '})',
    'export class SuperDashboardComponent implements OnInit, AfterViewInit, OnDestroy {',
    '  // Inputs/Outputs',
    '  @Input() set items(value: Item[] | null | undefined) { this.items$.next(value ?? []); }',
    '  @Input() config: DashboardConfig | null = null;',
    '  @Input() currentUser: User | null = null;',
    '  @Input() selectedId: string | null = null;',
    '',
    '  @Output() select = new EventEmitter<string>();',
    '  @Output() search = new EventEmitter<string>();',
    '  @Output() action = new EventEmitter<string>();',
    '',
    '  // Template refs',
    "  @ViewChild('filterInput') filterInput?: ElementRef<HTMLInputElement>;",
    "  @ContentChild('footerTpl') footerTpl?: TemplateRef<any>;",
    '',
    '  // Form',
    '  searchForm: FormGroup;',
    '',
    '  // State',
    '  private destroyed$ = new Subject<void>();',
    '  private items$ = new BehaviorSubject<Item[]>([]);',
    "  private query$ = new BehaviorSubject<string>('');",
    '  readonly state$ = new BehaviorSubject<LoadState>(LoadState.Idle);',
    '',
    '  // View model stream',
    '  readonly vm$ = combineLatest([',
    '    this.items$,',
    '    this.query$.pipe(debounceTime(120), distinctUntilChanged()),',
    '    this.state$,',
    '  ]).pipe(',
    '    map(([items, q, load]) => {',
    "      const filtered = (q ? q.trim().toLowerCase() : '') ?",
    "        items.filter(i => (i.title + ' ' + (i.subtitle ?? '')).toLowerCase().includes(q.toLowerCase())) :",
    '        items;',
    '',
    '      const topScore =',
    '        filtered',
    '          .map(i => i.score ?? -Infinity)',
    '          .filter(n => Number.isFinite(n))',
    '          .sort((a, b) => b - a)[0] ?? null;',
    '',
    '      const threshold = this.config?.highlightThreshold ?? 80;',
    '      const page = this.config?.pageSize ?? 20;',
    '',
    '      const visible = filtered.slice(0, page).map(i => ({',
    '        ...i,',
    "        isSelected: i.id === (this.selectedId ?? ''),",
    '        isTop: (i.score ?? -Infinity) >= threshold,',
    '      }));',
    '',
    "      const adminCount = filtered.reduce((acc, i) => acc + (i.author?.role === 'admin' ? 1 : 0), 0);",
    '',
    '      return {',
    '        load,',
    '        count: filtered.length,',
    '        visible,',
    '        topScore,',
    '        adminCount,',
    '        canFetchMore: filtered.length > page,',
    '      };',
    '    }),',
    '    shareReplay(1),',
    '  );',
    '',
    '  constructor(private fb: FormBuilder) {',
    '    this.searchForm = this.fb.group({',
    "      q: ['', [Validators.maxLength(120)]],",
    '    });',
    '',
    '    this.searchForm.valueChanges',
    '      .pipe(',
    '        takeUntil(this.destroyed$),',
    "        map(v => (v?.q ?? '').toString().trim()),",
    '        debounceTime(100),',
    '        tap(q => this.query$.next(q)),',
    '      )',
    '      .subscribe();',
    '  }',
    '',
    '  // Overload example (TS-friendly)',
    '  handleSelect(id: string): void;',
    '  handleSelect(id: null): void;',
    '  handleSelect(id: string | null): void {',
    '    if (!id) return;',
    '    this.select.emit(id);',
    '  }',
    '',
    '  ngOnInit(): void {',
    "    if (this.currentUser?.role === 'admin') {",
    '      timer(10).pipe(takeUntil(this.destroyed$)).subscribe();',
    '    }',
    '  }',
    '',
    '  ngAfterViewInit(): void {',
    '    this.filterInput?.nativeElement?.focus();',
    '  }',
    '',
    '  ngOnDestroy(): void {',
    '    this.destroyed$.next();',
    '    this.destroyed$.complete();',
    '  }',
    '',
    '  onSearchSubmit(): void {',
    "    const q = (this.searchForm.value?.q ?? '').toString().trim();",
    '    if (!q) return;',
    '    this.search.emit(q);',
    '  }',
    '',
    '  emitAction(id: string): void {',
    '    this.action.emit(id);',
    '  }',
    '',
    '  fetchMore(): void {',
    '    this.state$.next(LoadState.Loading);',
    '    of(true).pipe(',
    '      switchMap(() => timer(50)),',
    '      tap(() => {',
    '        const base = this.items$.value;',
    '        const extra: Item[] = [',
    "          { id: 'x' + (base.length + 1), title: 'New', score: Math.round(Math.random() * 100), author: this.currentUser },",
    '        ];',
    '        this.items$.next(base.concat(extra));',
    '        this.state$.next(LoadState.Success);',
    '      }),',
    '      takeUntil(this.destroyed$),',
    '    ).subscribe({ error: () => this.state$.next(LoadState.Error) });',
    '  }',
    '',
    '  // Getter/setter to exercise class members',
    '  private _denseClicks = 0;',
    '  get denseClicks(): number { return this._denseClicks; }',
    '  set denseClicks(v: number) { this._denseClicks = v; }',
    '',
    '  toggleDense(): void {',
    '    this.denseClicks++;',
    '    const dense = !!this.config?.dense;',
    '    this.config = { ...(this.config ?? {}), dense: !dense };',
    '  }',
    '',
    '  // Method decorator with args to stress parser',
    "  @HostListener('window:keydown', ['$event'])",
    '  onKey(e: KeyboardEvent): void {',
    "    if (e.key === 'Escape') {",
    "      this.query$.next('');",
    "      this.searchForm.patchValue({ q: '' });",
    '    }',
    '  }',
    '}',
  ],
};
