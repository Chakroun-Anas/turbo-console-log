export default {
  name: 'Complex NestJS application with guards, interceptors, filters, and advanced DI',
  sourceCode: [
    '// File: complex-nest.ts',
    'import {',
    '  Module,',
    '  Injectable,',
    '  Controller,',
    '  Get,',
    '  Post,',
    '  Patch,',
    '  Delete,',
    '  Param,',
    '  Body,',
    '  Query,',
    '  Headers,',
    '  UseGuards,',
    '  UseInterceptors,',
    '  UsePipes,',
    '  UseFilters,',
    '  HttpException,',
    '  HttpStatus,',
    '  ExecutionContext,',
    '  CallHandler,',
    '  NestInterceptor,',
    '  CanActivate,',
    '  BadRequestException,',
    '  NotFoundException,',
    '  Injectable as NestInjectable,',
    "} from '@nestjs/common';",
    "import { APP_GUARD, APP_INTERCEPTOR, APP_FILTER } from '@nestjs/core';",
    "import { Observable, of } from 'rxjs';",
    "import { map } from 'rxjs/operators';",
    '',
    '// ---- Custom Guard ----',
    '@Injectable()',
    'class ApiKeyGuard implements CanActivate {',
    '  canActivate(ctx: ExecutionContext): boolean {',
    '    const req = ctx.switchToHttp().getRequest();',
    "    const key = req.headers['x-api-key'];",
    "    return typeof key === 'string' && key.length > 0;",
    '  }',
    '}',
    '',
    '// ---- Interceptor (adds response metadata) ----',
    '@Injectable()',
    'class TransformInterceptor implements NestInterceptor {',
    '  intercept(_ctx: ExecutionContext, next: CallHandler): Observable<any> {',
    '    return next.handle().pipe(map((data) => ({ ok: true, data })));',
    '  }',
    '}',
    '',
    '// ---- Filter (simple example) ----',
    '@Injectable()',
    'class SimpleFilter {',
    '  catch(exception: any) {',
    '    const status =',
    '      exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;',
    "    return { ok: false, status, message: exception?.message ?? 'error' };",
    '  }',
    '}',
    '',
    '// ---- Entities/DTOs ----',
    "type Role = 'admin' | 'user';",
    'interface User { id: string; name: string; role: Role; }',
    'class CreateUserDto { name!: string; role?: Role; }',
    'class UpdateUserDto { name?: string; role?: Role; }',
    '',
    '// ---- Service with async + union returns ----',
    '@NestInjectable()',
    'class UsersService {',
    "  private users: User[] = [{ id: '1', name: 'Ada', role: 'admin' }];",
    '',
    '  async findAll(q?: string | null): Promise<User[]> {',
    '    const needle = q?.trim().toLowerCase();',
    '    return needle ? this.users.filter((u) => u.name.toLowerCase().includes(needle)) : this.users;',
    '  }',
    '',
    '  async create(dto: CreateUserDto): Promise<User> {',
    "    if (!dto.name?.trim()) throw new BadRequestException('name required');",
    '    const id = String(this.users.length + 1);',
    "    const user: User = { id, name: dto.name.trim(), role: dto.role ?? 'user' };",
    '    this.users.push(user);',
    '    return user;',
    '  }',
    '',
    '  async update(id: string, dto: UpdateUserDto): Promise<User> {',
    '    const u = this.users.find((x) => x.id === id);',
    "    if (!u) throw new NotFoundException('user not found');",
    '    if (dto.name) u.name = dto.name;',
    '    if (dto.role) u.role = dto.role;',
    '    return u;',
    '  }',
    '',
    '  async remove(id: string): Promise<boolean> {',
    '    const before = this.users.length;',
    '    this.users = this.users.filter((x) => x.id !== id);',
    '    return this.users.length < before;',
    '  }',
    '}',
    '',
    '// ---- Controller with method + param decorators ----',
    "@Controller('users')",
    '@UseGuards(ApiKeyGuard)',
    '@UseInterceptors(TransformInterceptor)',
    '@UsePipes() // intentionally empty to exercise decorator with no args',
    '@UseFilters() // likewise',
    'class UsersController {',
    '  constructor(private readonly svc: UsersService) {}',
    '',
    '  @Get()',
    "  list(@Query('q') q?: string | null) {",
    '    return this.svc.findAll(q);',
    '  }',
    '',
    '  @Post()',
    "  create(@Body() body: CreateUserDto, @Headers('x-trace-id') trace?: string) {",
    '    return this.svc.create(body);',
    '  }',
    '',
    "  @Patch(':id')",
    "  patch(@Param('id') id: string, @Body() body: UpdateUserDto) {",
    '    return this.svc.update(id, body);',
    '  }',
    '',
    "  @Delete(':id')",
    "  del(@Param('id') id: string) {",
    '    return this.svc.remove(id);',
    '  }',
    '}',
    '',
    '// ---- Module wiring with global providers ----',
    '@Module({',
    '  controllers: [UsersController],',
    '  providers: [',
    '    UsersService,',
    '    { provide: APP_GUARD, useClass: ApiKeyGuard },',
    '    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },',
    '    { provide: APP_FILTER, useClass: SimpleFilter },',
    '  ],',
    '})',
    'export class UsersModule {}',
  ],
};
