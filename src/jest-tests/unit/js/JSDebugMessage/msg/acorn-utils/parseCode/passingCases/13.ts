export default {
  name: 'Complex Vue 3 component with TypeScript, Composition API, and template syntax',
  sourceCode: [
    '// File: complex-vue.ts',
    "import { ref, computed, watch, onMounted, onUnmounted, provide, inject, defineComponent, PropType } from 'vue';",
    "import { useRouter, useRoute } from 'vue-router';",
    "import { storeToRefs } from 'pinia';",
    '',
    'interface User {',
    '  id: string;',
    '  name: string;',
    '  email?: string | null;',
    '  role: "admin" | "user" | "guest";',
    '}',
    '',
    'interface TableConfig {',
    '  pageSize?: number;',
    '  sortBy?: keyof User;',
    '  sortOrder?: "asc" | "desc";',
    '}',
    '',
    'type FilterFn = (user: User) => boolean;',
    '',
    'export default defineComponent({',
    "  name: 'UserTable',",
    '  props: {',
    '    users: {',
    '      type: Array as PropType<User[]>,',
    '      required: true,',
    '    },',
    '    config: {',
    '      type: Object as PropType<TableConfig>,',
    '      default: () => ({ pageSize: 10, sortBy: "name", sortOrder: "asc" }),',
    '    },',
    '    filterFn: {',
    '      type: Function as PropType<FilterFn>,',
    '      default: null,',
    '    },',
    '  },',
    '  emits: {',
    "    'user-select': (userId: string) => typeof userId === 'string',",
    "    'config-change': (config: TableConfig) => !!config,",
    '  },',
    '  template: `',
    '    <div class="user-table">',
    '      <div class="toolbar">',
    '        <input',
    '          v-model="searchQuery"',
    '          type="search"',
    '          placeholder="Search users..."',
    '          class="search-input"',
    '        />',
    '        <span class="stats">',
    '          Showing {{ paginatedUsers.length }} of {{ sortedUsers.length }} users',
    '        </span>',
    '      </div>',
    '',
    '      <div v-if="isLoading" class="loading">Loading...</div>',
    '',
    '      <table v-else>',
    '        <thead>',
    '          <tr>',
    "            <th @click=\"updateSort('name', 'asc')\">",
    '              Name',
    "              <span v-if=\"config.sortBy === 'name'\">{{ config.sortOrder === 'asc' ? '↑' : '↓' }}</span>",
    '            </th>',
    '            <th>Email</th>',
    "            <th @click=\"updateSort('role', 'asc')\">",
    '              Role',
    "              <span v-if=\"config.sortBy === 'role'\">{{ config.sortOrder === 'asc' ? '↑' : '↓' }}</span>",
    '            </th>',
    '            <th>Actions</th>',
    '          </tr>',
    '        </thead>',
    '        <tbody>',
    '          <tr',
    '            v-for="user in paginatedUsers"',
    '            :key="user.id"',
    '            :class="{ selected: user.id === selectedId }"',
    '            @click="selectUser(user.id)"',
    '          >',
    '            <td>{{ user.name }}</td>',
    "            <td>{{ user.email ?? '—' }}</td>",
    '            <td>',
    '              <span :class="\'badge badge-\' + user.role">{{ user.role }}</span>',
    '            </td>',
    '            <td>',
    '              <button @click.stop="navigateToUser(user.id)">View</button>',
    '            </td>',
    '          </tr>',
    '        </tbody>',
    '      </table>',
    '',
    '      <div v-if="totalPages > 1" class="pagination">',
    '        <button :disabled="currentPage === 1" @click="changePage(currentPage - 1)">Previous</button>',
    '        <span>Page {{ currentPage }} of {{ totalPages }}</span>',
    '        <button :disabled="currentPage === totalPages" @click="changePage(currentPage + 1)">Next</button>',
    '      </div>',
    '',
    '      <div v-if="hasSelection" class="selection-info">',
    '        <p>Selected user ID: {{ selectedId }}</p>',
    '      </div>',
    '    </div>',
    '  `,',
    '  styles: [`',
    '    .user-table {',
    '      width: 100%;',
    '      padding: 20px;',
    '      background: white;',
    '      border-radius: 8px;',
    '      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);',
    '    }',
    '    .toolbar {',
    '      display: flex;',
    '      justify-content: space-between;',
    '      align-items: center;',
    '      margin-bottom: 20px;',
    '      gap: 15px;',
    '    }',
    '    .search-input {',
    '      flex: 1;',
    '      padding: 8px 12px;',
    '      border: 1px solid #ddd;',
    '      border-radius: 4px;',
    '      font-size: 14px;',
    '    }',
    '    .stats {',
    '      color: #666;',
    '      font-size: 14px;',
    '    }',
    '    .loading {',
    '      text-align: center;',
    '      padding: 40px;',
    '      color: #999;',
    '    }',
    '    table {',
    '      width: 100%;',
    '      border-collapse: collapse;',
    '    }',
    '    th, td {',
    '      padding: 12px;',
    '      text-align: left;',
    '      border-bottom: 1px solid #eee;',
    '    }',
    '    th {',
    '      background: #f5f5f5;',
    '      font-weight: 600;',
    '      cursor: pointer;',
    '      user-select: none;',
    '    }',
    '    th:hover {',
    '      background: #e8e8e8;',
    '    }',
    '    tbody tr {',
    '      cursor: pointer;',
    '      transition: background 0.2s;',
    '    }',
    '    tbody tr:hover {',
    '      background: #f9f9f9;',
    '    }',
    '    tbody tr.selected {',
    '      background: #e3f2fd;',
    '    }',
    '    .badge {',
    '      padding: 4px 8px;',
    '      border-radius: 12px;',
    '      font-size: 12px;',
    '      font-weight: 500;',
    '    }',
    '    .badge-admin {',
    '      background: #ffebee;',
    '      color: #c62828;',
    '    }',
    '    .badge-user {',
    '      background: #e3f2fd;',
    '      color: #1565c0;',
    '    }',
    '    .badge-guest {',
    '      background: #f5f5f5;',
    '      color: #757575;',
    '    }',
    '    .pagination {',
    '      display: flex;',
    '      justify-content: center;',
    '      align-items: center;',
    '      gap: 15px;',
    '      margin-top: 20px;',
    '    }',
    '    .pagination button {',
    '      padding: 8px 16px;',
    '      border: 1px solid #007bff;',
    '      background: #007bff;',
    '      color: white;',
    '      border-radius: 4px;',
    '      cursor: pointer;',
    '    }',
    '    .pagination button:disabled {',
    '      opacity: 0.5;',
    '      cursor: not-allowed;',
    '    }',
    '    .selection-info {',
    '      margin-top: 15px;',
    '      padding: 10px;',
    '      background: #f5f5f5;',
    '      border-radius: 4px;',
    '    }',
    '  `],',
    '  setup(props, { emit, slots, attrs }) {',
    '    const router = useRouter();',
    '    const route = useRoute();',
    '',
    '    // Injected services',
    "    const logger = inject<{ log: (msg: string) => void }>('logger', { log: console.log });",
    '',
    '    // State',
    '    const currentPage = ref(1);',
    '    const selectedId = ref<string | null>(null);',
    '    const searchQuery = ref("");',
    '    const isLoading = ref(false);',
    '',
    '    // Computed',
    '    const filteredUsers = computed(() => {',
    '      let result = props.users;',
    '',
    '      // Apply custom filter',
    '      if (props.filterFn) {',
    '        result = result.filter(props.filterFn);',
    '      }',
    '',
    '      // Apply search',
    '      const query = searchQuery.value.trim().toLowerCase();',
    '      if (query) {',
    '        result = result.filter(',
    '          (u) => u.name.toLowerCase().includes(query) || u.email?.toLowerCase().includes(query)',
    '        );',
    '      }',
    '',
    '      return result;',
    '    });',
    '',
    '    const sortedUsers = computed(() => {',
    '      const { sortBy, sortOrder } = props.config;',
    '      if (!sortBy) return filteredUsers.value;',
    '',
    '      return [...filteredUsers.value].sort((a, b) => {',
    '        const aVal = a[sortBy];',
    '        const bVal = b[sortBy];',
    '        const comparison = aVal > bVal ? 1 : aVal < bVal ? -1 : 0;',
    '        return sortOrder === "desc" ? -comparison : comparison;',
    '      });',
    '    });',
    '',
    '    const paginatedUsers = computed(() => {',
    '      const { pageSize = 10 } = props.config;',
    '      const start = (currentPage.value - 1) * pageSize;',
    '      return sortedUsers.value.slice(start, start + pageSize);',
    '    });',
    '',
    '    const totalPages = computed(() => {',
    '      const { pageSize = 10 } = props.config;',
    '      return Math.ceil(sortedUsers.value.length / pageSize);',
    '    });',
    '',
    '    const hasSelection = computed(() => selectedId.value !== null);',
    '',
    '    // Methods',
    '    const selectUser = (userId: string) => {',
    '      selectedId.value = userId;',
    '      emit("user-select", userId);',
    '      logger.log(`User selected: ${userId}`);',
    '    };',
    '',
    '    const changePage = (page: number) => {',
    '      if (page >= 1 && page <= totalPages.value) {',
    '        currentPage.value = page;',
    '      }',
    '    };',
    '',
    '    const updateSort = (field: keyof User, order: "asc" | "desc" = "asc") => {',
    '      const newConfig: TableConfig = {',
    '        ...props.config,',
    '        sortBy: field,',
    '        sortOrder: order,',
    '      };',
    '      emit("config-change", newConfig);',
    '    };',
    '',
    '    const navigateToUser = async (userId: string) => {',
    '      isLoading.value = true;',
    '      try {',
    '        await router.push({ name: "user-detail", params: { id: userId } });',
    '      } catch (err) {',
    '        logger.log(`Navigation failed: ${err}`);',
    '      } finally {',
    '        isLoading.value = false;',
    '      }',
    '    };',
    '',
    '    // Watchers',
    '    watch(searchQuery, (newVal, oldVal) => {',
    '      if (newVal !== oldVal) {',
    '        currentPage.value = 1; // Reset to first page on search',
    '      }',
    '    });',
    '',
    '    watch(',
    '      () => props.users.length,',
    '      (newLen) => {',
    '        logger.log(`Users count changed: ${newLen}`);',
    '      }',
    '    );',
    '',
    '    // Lifecycle',
    '    onMounted(() => {',
    '      logger.log("UserTable mounted");',
    '      // Check route query params',
    '      if (route.query.page) {',
    '        currentPage.value = Number(route.query.page) || 1;',
    '      }',
    '    });',
    '',
    '    let intervalId: number | null = null;',
    '    onMounted(() => {',
    '      intervalId = window.setInterval(() => {',
    '        // Auto-refresh logic',
    '      }, 30000);',
    '    });',
    '',
    '    onUnmounted(() => {',
    '      if (intervalId) clearInterval(intervalId);',
    '      logger.log("UserTable unmounted");',
    '    });',
    '',
    '    // Provide for child components',
    '    provide("tableContext", {',
    '      selectedId,',
    '      selectUser,',
    '    });',
    '',
    '    return {',
    '      // State',
    '      currentPage,',
    '      selectedId,',
    '      searchQuery,',
    '      isLoading,',
    '      // Computed',
    '      paginatedUsers,',
    '      totalPages,',
    '      hasSelection,',
    '      // Methods',
    '      selectUser,',
    '      changePage,',
    '      updateSort,',
    '      navigateToUser,',
    '    };',
    '  },',
    '});',
  ],
};
