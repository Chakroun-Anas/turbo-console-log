export default {
  name: 'Complex React TypeScript dashboard with advanced types and patterns',
  fileExtension: '.tsx',
  sourceCode: [
    '// File: ComplexDashboard.tsx',
    'import React, {',
    '  useCallback,',
    '  useEffect,',
    '  useLayoutEffect,',
    '  useMemo,',
    '  useRef,',
    '  useState,',
    '  useReducer,',
    '  Suspense,',
    '  lazy,',
    '  Fragment,',
    '  createContext,',
    '  useContext,',
    '  forwardRef,',
    '  memo,',
    '  createPortal,',
    '} from "react";',
    '',
    'type User = {',
    '  id: string;',
    '  name: string;',
    '  email?: string | null;',
    '};',
    '',
    'type Item = {',
    '  id: string;',
    '  title: string;',
    '  subtitle?: string;',
    '  score?: number | null;',
    '  tags?: string[];',
    '  author?: User | null;',
    '  details?: { html?: string; meta?: Record<string, unknown> };',
    '  selectedId?: string | null; // for a quirky pattern in mapping',
    '};',
    '',
    'type RowItem = Item & {',
    '  isSelected: boolean;',
    '  isTop: boolean;',
    '  label: string;',
    '};',
    '',
    'type ComplexDashboardProps = {',
    '  data?: Item[];',
    '  title?: string;',
    '  footerContainer?: Element | null;',
    '};',
    '',
    'type Theme = { tone: "light" | "dark" };',
    '',
    'const ThemeContext = createContext<Theme>({ tone: "light" });',
    '',
    'function useDebounced<T>(value: T, ms = 100): T {',
    '  const [v, setV] = useState<T>(value);',
    '  useEffect(() => {',
    '    const t = setTimeout(() => setV(value), ms);',
    '    return () => clearTimeout(t);',
    '  }, [value, ms]);',
    '  return v;',
    '}',
    '',
    '// Small helper class (public field + method)',
    'class Box {',
    '  value = 0;',
    '  constructor(v = 0) {',
    '    this.value = v ?? 0;',
    '  }',
    '  inc(n = 1) {',
    '    this.value += n;',
    '    return this.value;',
    '  }',
    '}',
    '',
    '// Lazy panel (keeps it TS-friendly)',
    'const DetailsPanel = lazy(async () => {',
    '  return {',
    '    default: ({ children }: { children?: React.ReactNode }) => (',
    '      <div className="fallback-details">{children}</div>',
    '    ),',
    '  };',
    '});',
    '',
    '// ---- Child bits -------------------------------------------------------------',
    '',
    'const Toolbar = memo(function Toolbar({ children }: { children: React.ReactNode }) {',
    '  return (',
    '    <div',
    '      className="toolbar"',
    '      style={{ display: "flex", gap: 12, alignItems: "center" as const }}',
    '    >',
    '      {children}',
    '    </div>',
    '  );',
    '});',
    '',
    'const Row = forwardRef<HTMLLIElement, { item: RowItem; onSelect: (id: string) => void }>(',
    '  function Row({ item, onSelect }, ref) {',
    '    const tone = useContext(ThemeContext)?.tone ?? "light";',
    '',
    '    const badge: string | null = (() => {',
    '      if (item.isTop) return "ðŸ”¥";',
    '      if (item.isSelected) return "ðŸ‘‰";',
    '      return null;',
    '    })();',
    '',
    '    const cls = ["row", item.isSelected && "selected", item.isTop && "top", `t-${tone}`]',
    '      .filter(Boolean)',
    '      .join(" ");',
    '',
    '    return (',
    '      <li',
    '        ref={ref}',
    '        className={cls}',
    '        data-selected={item.isSelected ? "true" : undefined}',
    '        onClick={() => onSelect(item.id)}',
    '      >',
    '        <header>',
    '          <span>{badge}</span>',
    '          <strong>{item.label}</strong>',
    '          <small>{item.author?.email ?? "(no email)"}</small>',
    '        </header>',
    '',
    '        {item.tags?.length ? (',
    '          <div className="tags">',
    '            {item.tags.map((t) => (',
    '              <code key={t}>{t}</code>',
    '            ))}',
    '          </div>',
    '        ) : item.subtitle ? (',
    '          <em>{item.subtitle}</em>',
    '        ) : null}',
    '',
    '        {item.details?.html ? (',
    '          <div',
    '            // attribute object inside JSX',
    '            dangerouslySetInnerHTML={{ __html: item.details.html }}',
    '          />',
    '        ) : null}',
    '      </li>',
    '    );',
    '  }',
    ');',
    '',
    '// ---- Main component ---------------------------------------------------------',
    '',
    'export default function ComplexDashboard({',
    '  data = [],',
    '  title = "Complex Dashboard",',
    '  footerContainer,',
    '}: ComplexDashboardProps) {',
    '  const [q, setQ] = useState("");',
    '  const [dense, setDense] = useState(false);',
    '  const [count, setCount] = useState(0);',
    '',
    '  type Action = { type: "inc" } | { type: "toggle" };',
    '  type ReducerState = { clicks: number; open: boolean };',
    '',
    '  const [state, dispatch] = useReducer<React.Reducer<ReducerState, Action>>(',
    '    (s, a) => {',
    '      switch (a.type) {',
    '        case "inc":',
    '          return { ...s, clicks: s.clicks + 1 };',
    '        case "toggle":',
    '          return { ...s, open: !s.open };',
    '        default:',
    '          return s;',
    '      }',
    '    },',
    '    { clicks: 0, open: true }',
    '  );',
    '',
    '  const debouncedQ = useDebounced(q, 120);',
    '  const listRef = useRef<HTMLUListElement | null>(null);',
    '  const boxRef = useRef(new Box(41));',
    '',
    '  // Derived data',
    '  const items: RowItem[] = useMemo(() => {',
    '    const needle = debouncedQ.trim().toLowerCase();',
    '',
    '    const filtered = needle',
    '      ? data.filter((i) =>',
    '          (i.title + " " + (i.subtitle ?? "")).toLowerCase().includes(needle)',
    '        )',
    '      : data;',
    '',
    '    const topScore =',
    '      filtered',
    '        .map((i) => i.score ?? -Infinity)',
    '        .filter((n) => Number.isFinite(n))',
    '        .sort((a, b) => b - a)[0] ?? null;',
    '',
    '    return filtered.map((i) => ({',
    '      ...i,',
    '      isSelected: i.id === (i.selectedId ?? ""),',
    '      isTop: topScore != null && i.score === topScore,',
    '      label: i.subtitle ? `${i.title} â€” ${i.subtitle}` : i.title ?? "(untitled)",',
    '    }));',
    '  }, [data, debouncedQ]);',
    '',
    '  const topScore: number | null = useMemo(() => {',
    '    const s =',
    '      items',
    '        .map((i) => i.score ?? -Infinity)',
    '        .filter((n) => Number.isFinite(n))',
    '        .sort((a, b) => b - a)[0] ?? null;',
    '    return s != null && Number.isFinite(s) ? (s as number) : null;',
    '  }, [items]);',
    '',
    '  useLayoutEffect(() => {',
    '    listRef.current?.querySelectorAll("[data-selected=\'true\']");',
    '  }, [items.length]);',
    '',
    '  useEffect(() => {',
    '    try {',
    '      if (/\\w+/.test(title)) {',
    '        // side-effect only, keep simple',
    '      }',
    '    } catch (e) {',
    '      const msg = (e as Error)?.message ?? String(e);',
    '      // eslint-disable-next-line no-console',
    '      console.error("title error:", msg);',
    '    }',
    '  }, [title]);',
    '',
    '  const onSelect = useCallback((id: string) => {',
    '    dispatch({ type: "inc" });',
    '    setCount((n) => n + 1);',
    '    boxRef.current.inc(1);',
    '  }, []);',
    '',
    '  const footer = (',
    '    <footer>',
    '      {(count > 5 && (',
    '        <button onClick={() => setDense((d) => !d)}>',
    '          Toggle dense (now {String(dense)})',
    '        </button>',
    '      )) || <small>Make {title} yours</small>}',
    '      {topScore == null && <small>No scores available</small>}',
    '    </footer>',
    '  );',
    '',
    '  return (',
    '    <ThemeContext.Provider value={{ tone: dense ? "dark" : "light" }}>',
    '      <section className={dense ? "dense" : ""}>',
    '        <h2>{title}</h2>',
    '',
    '        <Toolbar>',
    '          <span>',
    '            Showing <strong>{items.length}</strong> items',
    '          </span>',
    '          <span>',
    '            Top score: <strong>{topScore ?? "â€”"}</strong>',
    '          </span>',
    '          <input',
    '            value={q}',
    '            onChange={(e) => setQ(e.target.value)}',
    '            placeholder="Filterâ€¦"',
    '          />',
    '          <button onClick={() => dispatch({ type: "toggle" })}>',
    '            {state.open ? "Hide" : "Show"} list',
    '          </button>',
    '        </Toolbar>',
    '',
    '        <Suspense fallback={<div className="skeleton">Loading detailsâ€¦</div>}>',
    '          <DetailsPanel>',
    '            {state.open && (',
    '              <ul ref={listRef}>',
    '                {items.map((i, idx) => {',
    '                  const odd = idx % 2 === 1;',
    '                  const className = ["slot", odd && "odd"].filter(Boolean).join(" ");',
    '                  return (',
    '                    <Fragment key={i.id}>',
    '                      <div className={className} />',
    '                      <Row item={i} onSelect={onSelect} />',
    '                    </Fragment>',
    '                  );',
    '                })}',
    '              </ul>',
    '            )}',
    '          </DetailsPanel>',
    '        </Suspense>',
    '',
    '        {/* Portal test (parsing only) */}',
    '        {footerContainer ? createPortal(footer, footerContainer) : footer}',
    '      </section>',
    '    </ThemeContext.Provider>',
    '  );',
    '}',
  ],
};
